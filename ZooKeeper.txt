【TOC】
#ZooKeeper
    命名管理(Naming)
    配置管理(Configuragion Management)
    集群管理(Group Membership)
        状态监控(Status Monitoring)
        选主(Leader Election)
    同步管理(Synchronization)
        共享锁(Locks)
        同步队列(Synchronous Queue)
        双屏障(Double Barrier)


##1.Abstracct
    组消息传递、共享寄存器、分布式锁
    暴露接口
    事件驱动
    FIFO、pipeline


##2.Introduction
    配置；
    可以使用更强大的原语的服务来实现较弱的原语（如Chubby强同步保证的锁服务来实现领导选举、组成员关系等）；
    选择暴露API，使开发人员能够实现自己的原语；
    分层组织的无等待数据对象。在设计ZooKeeper时放弃阻塞原语（如锁）；
    无等待对性能和容错很重要，但对协调还不够，还必须提供操作的顺序保证。客户端操作FIFO、线性化写入；
    基于领导的原子广播协议；
    监视机制（Watch）


##3.The ZooKeeper service
##3.1 概述
    Znode
        常规节点：客户端显示创建和删除；
        临时性节点：创建并显示删除，或会话终止时系统自动删除；
    
    Watch机制
        一次性触发器，不可更改；
        不需要轮询，事件通知；
    
    数据模型
        分层命名空间；
        不存储一般的数据，但也可以存储一些元数据和配置信息；
    
    Session
        客户端连接到ZooKeeper并启动会话，timeout；

##3.2 Client API
    create(path, data, flags)；
    delete(path, version)；
    exists(path, watch)；
    getData(path, watch)；
    setData(path, data, version)；
    getChildren(path, watch)；
    sync(path)；

##3.3 ZooKeeper Guarantees
    两个基本顺序保证：
        线性写：所有更新ZooKeeper状态的操作都是串行的，先来先服务；
        FIFO客户端顺序：来自客户端的所有请求按客户端发送的顺序依次执行；
    包括多个进程的系统选举leader来命令工作进程，当新的leader负责该系统时，它必须修改大量的配置参数，并且一旦它完成就通知其它进程。 我们有两个重要要求 ：
        当新的Leader开始进行改变时，我们不希望其他进程使用正在被改变的配置；
        若新的Leader在配置被完全更新之前宕机，我们不希望进程使用这个部分新的配置；
    ready Znode

##3.4 Examples of Primitives
    即使ZooKeeper是无等待的，我们可以使用Zookeeper实现有效的阻塞原语；
    ZooKeeper的顺序保证允许有效的推理系统状态，watches允许有效等待；
    
    1.Configuration Management：
        实现动态配置。 在其最简单的形式中，配置被存储在Znode（Zc）中。 进程以Zc的完整路径名开始。启动进程通过读取Zc而获得它们的配置，其中watch设置为True。 如果更新了Zc中的配置，则通知进程处理并读取新配置，再次将watch标志设置为True。
    2.Rendezvous
        有时在分布式系统中，最终的系统配置将看起来是什么样子并不总是清楚的。例如，客户机可能想要启动Master进程和几个Worker进程，但是启动进程是由Scheduler完成的，因此客户机预先不知道信息用来给予Worker进程连接到主设备的信息（如地址和端口）。我们用Zookeeper来处理这个场景，Znode Zr是由客户端创建的节点。客户机将Zr的完整路径名作为Master和Worker进程的启动参数传递。当Master启动时，它就会使用关于地址和端口的信息填充Zr。当Worker启动时，它们读Zr，并watch设置为真。如果Zr尚未被填写，则在Zr更新时，Worker会被通知。如果Zr是临时节点，则Master和Worker进程可以在客户端结束时监视Zr被删除并清除自己。
    3.Group Membership
        我们利用临时节点来实现组成员身份。临时节点允许我们看到创建节点的会话状态。Zg代表一个组。 当组的进程成员启动时，它在Zg下创建临时子Znode。如果每个进程都有唯一名称或标识符，则该名称被用作子Znode的名称；否则，进程将创建带有顺序标志的Znode，以获得唯一名称分配。进程可以将进程信息放入进程所使用的子Znode、地址和端口的数据中。在Zg下创建子Znode之后，进程正常开始。它不需要做任何别的事情，如果进程失败或结束，则自动删除表示它的Znode。进程可以通过简单列出Zg的children来获得组信息。如果进程想要监视组成员身份的改变，则该进程可以在接收到改变通知时将watch标志设置为真，并且刷新组信息 (将watch标志总是设置为真)。
    4.Simple Locks
        虽然ZooKeeper不是一个锁服务，它可以用来实现锁。最简单的锁实现使用“锁文件”。锁由一个Znode表示。为了获取锁，客户端尝试创建具有临时标志的指定Znode，如果创建成功，则客户端持有锁；否则，客户端使用watch标志来读取Znode以得到通知，如果当前的Leader死亡，客户端在其死亡或非法删除Znode时释放锁。其他正在等待锁的客户端一旦观察到被删除的Znode，就会再次尝试获取锁。
        虽然这种简单的锁协议奏效，但也存在问题。首先，它受到羊群效应的影响。如果有许多客户端等待获取锁，即使只有一个客户端可以获取锁，它们都会在释放锁的时候争夺锁。第二，它只实现了互斥锁，下面的两个原语说明如何克服这两个问题。
    5.Simple Locks without Herd Effect
        直观上，我们排列所有请求锁的客户端，每个客户端都按请求到达的顺序获得锁。
        Znode 的移除仅导致一个客户端醒来，因为每个Znode被恰好另一个客户端监视，所以我们没有羊群效应；没有轮询或超时；由于我们实现锁的方式，我们可以通过浏览Zookeeper数据来查看锁争用、中断锁和调试锁定问题。
    6.Read/Write Locks
        写锁只在命名方面不同。由于读取锁可以被共享，所以行3和4稍微改变，因为只有较早的写入锁Znode才能阻止客户机获取读取锁。如果有几个客户端等待读取锁，并且在删除具有较低序列号的“write-”znode时得到通知，这似乎出现“ 羊群效应 ”；实际上，这是我们所需要的行为，所有那些读取客户端都应该被释放，因为它们现在有了锁。
    7.Double Barrier
        双重屏障使客户端能够同步计算的开始和结束。当足够多（达到屏障阈值）的进程已经加入屏障时，进程开始它们的计算,并且一旦它们完成就离开屏障。
        我们用Znode来表示Zookeeper的屏障，称为b，每一个进程P都向b注册（通过创建一个Znode作为b的孩子），在它准备好离开时取消注册-。当b的子Znode的数目超过屏障阈值时，进程可以进入屏障；当所有的进程都已移除其孩子时，进程可以离开屏障。
        我们使用watch来有效等待进入和退出条件得到满足。要进入屏障的话，进程监视一个由进程创建的将会导致孩子数量超过障碍阈值的b的一个ready孩子的existence；要离开屏障，进程监视某个特定的孩子消失，并且只有在这个特定的Znode被删除后才检查退出条件。


##4.ZooKeeper Implementation
    接收请求后，服务器将准备执行（请求处理器）。 如果这样的请求需要服务器之间的协调(写请求)，那么它们使用协议 (原子广播的实现)，并且最终服务器将提交改变到在该系综的所有服务器上完全复制Zoo-Keeper数据库。在读取请求的情况下，服务器简单地读取本地数据库的状态并生成对请求的响应。
    备份数据库是包含整个数据树的内存数据库。树中的每个Znode默认存储最多1MB的数据，但是这个最大值是在特定情况下可以更改的配置参数。 对于可恢复性，我们有效地将更新记录到磁盘上，并且在磁盘介质被应用到内存数据库之前，我们强制写入磁盘介质。事实上，与Chubby相比，我们保留了提交的操作的重放日志（在我们这里是WAL预写日志），并生成内存中数据库的定期快照。
    
    1.Request Processor
        由于消息层是原子的，我们保证本地副本从不偏离，尽管在任何时间点，一些服务器可能比其他服务器应用更多的事务。 与从客户端发送的请求不同，事务是幂等的。当Leader接收到写请求时，它计算当应用写入时系统的状态将是什么，并且将它转换成捕获这个新状态的事务。由于可能存在尚未应用于数据库的可能存在的事务，因此必须计算该状态。例如，如果一个客户端在请求中的条件setData和版本号匹配正在更新的Znode的未来的版本号，则该服务生成一个SetDataTxN，该SetDataTxN包含新数据、新版本号和更新的时间戳。 如果出现错误，如不匹配版本号或要更新的Znode不存在，则改为生成ErrorTXN。
    2.Atomic Broadcast
        所有更新ZooKeeper状态的请求都被转发到Leader。Leader执行这个请求并通过ZAB，一个原子广播协议向ZooKeepeer广播改变。接收客户端请求的服务器在其递送对应的状态改变时响应客户端。ZAB用大多数的意见来决定一个建议，即用2f+1台服务器我们可以容忍f故障。
        在正常操作期间，ZAB确实将所有消息按顺序传送，但由于ZAB没有持续记录所传递的每个消息的 ID，所以ZAB可以在恢复期间重新发送消息。因为我们使用幂等事务，所以只要顺序交付，多次交付就可以接收。事实上，ZooKeeper要求Zab至少重新发送在上次快照开始之后交付的所有消息。
    3.Replicated Database
        每个副本都有一个在内存里的ZooKeeper状态的副本。当管理员服务器从崩溃中恢复时，它需要恢复此内部状态。在运行服务器一段时间后，重放所有恢复状态的消息以恢复状态将非常耗时，所以 ZooKeeper 使用定期快照，只需要自快照开始后重新发送消息。我们调用Zoo-Keeper快照模糊快照，因为我们不锁定Zookeeper状态来获取快照；相反，我们首先进行树的深度扫描，以原子读取每个znode 的数据和元数据并将它们写入磁盘。 由于所得到的模糊快照可能已经应用了在生成快照期间所传递的状态改变的一些子集，所以结果可能不对应于在任何时间点的ZooKeeper的状态。然而，由于状态变化是幂等的，所以只要我们按顺序应用状态改变，我们就可以应用两次。
    4.Client-Server Interactions
        当服务器处理写请求时，它还发送并清除与该更新相对应的任何watch相关的通知。Servers 按顺序处理写入,并且不同时处理其他写入或读取。这确保了通知的严格连续。注意服务器只处理本地通知。 只有客户端所连接到的服务器才跟踪并触发该客户端的通知。
        Read请求在每个服务器上本地处理。 每个读请求都被处理并标记有一个zxid，该zxid对应于服务器看到的最后一个事务。此zxid定义读取请求的部分顺序，并重新检查写入请求。 通过本地处理读取，我们获得了优异的读取性能，因为它只是本地服务器上的内存操作，并且没有读的磁盘的操作或者协议去运行。这样设计是实现具有读为主要工作负载的优良性能的目标的关键。
